#include <UnitTest/stdafx.h>
#include <UnitTest/UnitTest.h>
#include <core/smartview/SmartView.h>
#include <core/addin/mfcmapi.h>
#include <core/addin/addin.h>
#include <core/utility/strings.h>

namespace SmartViewTest
{
	TEST_CLASS(SmartViewTest)
	{
	private:
		// Without this, clang gets weird
		static const bool dummy_var = true;

		void test(parserType structType, DWORD hexNum, DWORD expectedNum) const
		{
			static auto handle = GetModuleHandleW(L"UnitTest.dll");
			// See comments on loadfile for best file encoding strategies for test data
			const auto testName = strings::format(L"%d/%d", hexNum, expectedNum);
			auto hex = strings::HexStringToBin(unittest::loadfile(handle, hexNum));
			const auto expected = unittest::loadfile(handle, expectedNum);
			auto actual =
				smartview::InterpretBinaryAsString({static_cast<ULONG>(hex.size()), hex.data()}, structType, nullptr);
			unittest::AreEqualEx(expected, actual, testName.c_str());

			if (unittest::parse_all)
			{
				for (auto parser : SmartViewParserTypeArray)
				{
					try
					{
						actual = smartview::InterpretBinaryAsString(
							{static_cast<ULONG>(hex.size()), hex.data()}, parser.type, nullptr);
					} catch (const int exception)
					{
						Logger::WriteMessage(strings::format(
												 L"Testing %ws failed at %ws with error 0x%08X\n",
												 testName.c_str(),
												 addin::AddInStructTypeToString(parser.type).c_str(),
												 exception)
												 .c_str());
						Assert::Fail();
					}
				}
			}
		}

	public:
		TEST_CLASS_INITIALIZE(initialize) { unittest::init(); }

		TEST_METHOD(Test_STADDITIONALRENENTRYIDSEX)
		{
			test(parserType::ADDITIONALRENENTRYIDSEX, IDR_SV1AEI1IN, IDR_SV1AEI1OUT);
			test(parserType::ADDITIONALRENENTRYIDSEX, IDR_SV1AEI2IN, IDR_SV1AEI2OUT);
			test(parserType::ADDITIONALRENENTRYIDSEX, IDR_SV1AEI3IN, IDR_SV1AEI3OUT);
			test(parserType::ADDITIONALRENENTRYIDSEX, IDR_SV1AEI4IN, IDR_SV1AEI4OUT);
		}

		TEST_METHOD(Test_STAPPOINTMENTRECURRENCEPATTERN)
		{
			test(parserType::APPOINTMENTRECURRENCEPATTERN, IDR_SV2ARP1IN, IDR_SV2ARP1OUT);
			test(parserType::APPOINTMENTRECURRENCEPATTERN, IDR_SV2ARP2IN, IDR_SV2ARP2OUT);
			test(parserType::APPOINTMENTRECURRENCEPATTERN, IDR_SV2ARP3IN, IDR_SV2ARP3OUT);
			test(parserType::APPOINTMENTRECURRENCEPATTERN, IDR_SV2ARP4IN, IDR_SV2ARP4OUT);
		}

		TEST_METHOD(Test_STCONVERSATIONINDEX)
		{
			test(parserType::CONVERSATIONINDEX, IDR_SV3CI1IN, IDR_SV3CI1OUT);
			test(parserType::CONVERSATIONINDEX, IDR_SV3CI2IN, IDR_SV3CI2OUT);
			test(parserType::CONVERSATIONINDEX, IDR_SV3CI3IN, IDR_SV3CI3OUT);
			test(parserType::CONVERSATIONINDEX, IDR_SV3CI4IN, IDR_SV3CI4OUT);
		}

		TEST_METHOD(Test_STENTRYID)
		{
			test(parserType::ENTRYID, IDR_SV4EID1IN, IDR_SV4EID1OUT);
			test(parserType::ENTRYID, IDR_SV4EID2IN, IDR_SV4EID2OUT);
			test(parserType::ENTRYID, IDR_SV4EID3IN, IDR_SV4EID3OUT);
			test(parserType::ENTRYID, IDR_SV4EID4IN, IDR_SV4EID4OUT);
			test(parserType::ENTRYID, IDR_SV4EID5IN, IDR_SV4EID5OUT);
			test(parserType::ENTRYID, IDR_SV4EID6IN, IDR_SV4EID6OUT);
			test(parserType::ENTRYID, IDR_SV4EID7IN, IDR_SV4EID7OUT);
			test(parserType::ENTRYID, IDR_SV4EID8IN, IDR_SV4EID8OUT);
			test(parserType::ENTRYID, IDR_SV4EID9IN, IDR_SV4EID9OUT);
			test(parserType::ENTRYID, IDR_SV4EID10IN, IDR_SV4EID10OUT);
			test(parserType::ENTRYID, IDR_SV4EID11IN, IDR_SV4EID11OUT);
			test(parserType::ENTRYID, IDR_SV4EID12IN, IDR_SV4EID12OUT);
			test(parserType::ENTRYID, IDR_SV4EID13IN, IDR_SV4EID13OUT);
			test(parserType::ENTRYID, IDR_SV4EID14IN, IDR_SV4EID14OUT);
			test(parserType::ENTRYID, IDR_SV4EID15IN, IDR_SV4EID15OUT);
			test(parserType::ENTRYID, IDR_SV4EID16IN, IDR_SV4EID16OUT);
			test(parserType::ENTRYID, IDR_SV4EID17IN, IDR_SV4EID17OUT);
			test(parserType::ENTRYID, IDR_SV4EID18IN, IDR_SV4EID18OUT);
			test(parserType::ENTRYID, IDR_SV4EID19IN, IDR_SV4EID19OUT);
			test(parserType::ENTRYID, IDR_SV4EID20IN, IDR_SV4EID20OUT);
			test(parserType::ENTRYID, IDR_SV4EID21IN, IDR_SV4EID21OUT);
			test(parserType::ENTRYID, IDR_SV4EID22IN, IDR_SV4EID22OUT);
			test(parserType::ENTRYID, IDR_SV4EID23IN, IDR_SV4EID23OUT);
			test(parserType::ENTRYID, IDR_SV4EID24IN, IDR_SV4EID24OUT);
			test(parserType::ENTRYID, IDR_SV4EID25IN, IDR_SV4EID25OUT);
			test(parserType::ENTRYID, IDR_SV4EID26IN, IDR_SV4EID26OUT);
			test(parserType::ENTRYID, IDR_SV4EID27IN, IDR_SV4EID27OUT);
			test(parserType::ENTRYID, IDR_SV4EID28IN, IDR_SV4EID28OUT);
			test(parserType::ENTRYID, IDR_SV4EID29IN, IDR_SV4EID29OUT);
			test(parserType::ENTRYID, IDR_SV4EID30IN, IDR_SV4EID30OUT);
			test(parserType::ENTRYID, IDR_SV4EID31IN, IDR_SV4EID31OUT);
			test(parserType::ENTRYID, IDR_SV4EID32IN, IDR_SV4EID32OUT);
			test(parserType::ENTRYID, IDR_SV4EID33IN, IDR_SV4EID33OUT);
			test(parserType::ENTRYID, IDR_SV4EID34IN, IDR_SV4EID34OUT);
			test(parserType::ENTRYID, IDR_SV4EID35IN, IDR_SV4EID35OUT);
			test(parserType::ENTRYID, IDR_SV4EID36IN, IDR_SV4EID36OUT);
			test(parserType::ENTRYID, IDR_SV4EID37IN, IDR_SV4EID37OUT);
			test(parserType::ENTRYID, IDR_SV4EID38IN, IDR_SV4EID38OUT);
			test(parserType::ENTRYID, IDR_SV4EID39IN, IDR_SV4EID39OUT);
			test(parserType::ENTRYID, IDR_SV4EID40IN, IDR_SV4EID40OUT);
		}

		TEST_METHOD(Test_STENTRYLIST)
		{
			test(parserType::ENTRYLIST, IDR_SV5EL1IN, IDR_SV5EL1OUT);
			test(parserType::ENTRYLIST, IDR_SV5EL2IN, IDR_SV5EL2OUT);
		}

		TEST_METHOD(Test_STEXTENDEDFOLDERFLAGS)
		{
			test(parserType::EXTENDEDFOLDERFLAGS, IDR_SV6EFF1IN, IDR_SV6EFF1OUT);
			test(parserType::EXTENDEDFOLDERFLAGS, IDR_SV6EFF2IN, IDR_SV6EFF2OUT);
		}

		TEST_METHOD(Test_STEXTENDEDRULECONDITION)
		{
			test(parserType::EXTENDEDRULECONDITION, IDR_SV7EXRULE1IN, IDR_SV7EXRULE1OUT);
			test(parserType::EXTENDEDRULECONDITION, IDR_SV7EXRULE2IN, IDR_SV7EXRULE2OUT);
			test(parserType::EXTENDEDRULECONDITION, IDR_SV7EXRULE3IN, IDR_SV7EXRULE3OUT);
			test(parserType::EXTENDEDRULECONDITION, IDR_SV7EXRULE4IN, IDR_SV7EXRULE4OUT);
		}

		TEST_METHOD(Test_STFLATENTRYLIST)
		{
			test(parserType::FLATENTRYLIST, IDR_SV8FE1IN, IDR_SV8FE1OUT);
			test(parserType::FLATENTRYLIST, IDR_SV8FE2IN, IDR_SV8FE2OUT);
			test(parserType::FLATENTRYLIST, IDR_SV8FE3IN, IDR_SV8FE3OUT);
		}

		TEST_METHOD(Test_STFOLDERUSERFIELDS)
		{
			test(parserType::FOLDERUSERFIELDS, IDR_SV9FUF1IN, IDR_SV9FUF1OUT);
			test(parserType::FOLDERUSERFIELDS, IDR_SV9FUF2IN, IDR_SV9FUF2OUT);
			test(parserType::FOLDERUSERFIELDS, IDR_SV9FUF3IN, IDR_SV9FUF3OUT);
			test(parserType::FOLDERUSERFIELDS, IDR_SV9FUF4IN, IDR_SV9FUF4OUT);
			test(parserType::FOLDERUSERFIELDS, IDR_SV9FUF5IN, IDR_SV9FUF5OUT);
		}

		TEST_METHOD(Test_STGLOBALOBJECTID)
		{
			test(parserType::GLOBALOBJECTID, IDR_SV10GOID1IN, IDR_SV10GOID1OUT);
			test(parserType::GLOBALOBJECTID, IDR_SV10GOID2IN, IDR_SV10GOID2OUT);
		}

		TEST_METHOD(Test_STPROPERTY)
		{
			test(parserType::PROPERTIES, IDR_SV11PROP1IN, IDR_SV11PROP1OUT);
			test(parserType::PROPERTIES, IDR_SV11PROP2IN, IDR_SV11PROP2OUT);
			test(parserType::PROPERTIES, IDR_SV11PROP3IN, IDR_SV11PROP3OUT);
			test(parserType::PROPERTIES, IDR_SV11PROP4IN, IDR_SV11PROP4OUT);
			test(parserType::PROPERTIES, IDR_SV11PROP5IN, IDR_SV11PROP5OUT);
			test(parserType::PROPERTIES, IDR_SV11PROP6IN, IDR_SV11PROP6OUT);
			test(parserType::PROPERTIES, IDR_SV11PROP7IN, IDR_SV11PROP7OUT);
			test(parserType::PROPERTIES, IDR_SV11PROP8IN, IDR_SV11PROP8OUT);
		}

		TEST_METHOD(Test_STPROPERTYDEFINITIONSTREAM)
		{
			test(parserType::PROPERTYDEFINITIONSTREAM, IDR_SV12PROPDEF1IN, IDR_SV12PROPDEF1OUT);
			test(parserType::PROPERTYDEFINITIONSTREAM, IDR_SV12PROPDEF2IN, IDR_SV12PROPDEF2OUT);
			test(parserType::PROPERTYDEFINITIONSTREAM, IDR_SV12PROPDEF3IN, IDR_SV12PROPDEF3OUT);
			test(parserType::PROPERTYDEFINITIONSTREAM, IDR_SV12PROPDEF4IN, IDR_SV12PROPDEF4OUT);
			test(parserType::PROPERTYDEFINITIONSTREAM, IDR_SV12PROPDEF5IN, IDR_SV12PROPDEF5OUT);
			test(parserType::PROPERTYDEFINITIONSTREAM, IDR_SV12PROPDEF6IN, IDR_SV12PROPDEF6OUT);
			test(parserType::PROPERTYDEFINITIONSTREAM, IDR_SV12PROPDEF7IN, IDR_SV12PROPDEF7OUT);
			test(parserType::PROPERTYDEFINITIONSTREAM, IDR_SV12PROPDEF8IN, IDR_SV12PROPDEF8OUT);
		}

		TEST_METHOD(Test_STRECIPIENTROWSTREAM)
		{
			test(parserType::RECIPIENTROWSTREAM, IDR_SV13RECIPROW1IN, IDR_SV13RECIPROW1OUT);
			test(parserType::RECIPIENTROWSTREAM, IDR_SV13RECIPROW2IN, IDR_SV13RECIPROW2OUT);
		}

		TEST_METHOD(Test_STRECURRENCEPATTERN)
		{
			test(parserType::RECURRENCEPATTERN, IDR_SV14ARP1IN, IDR_SV14ARP1OUT);
			test(parserType::RECURRENCEPATTERN, IDR_SV14ARP2IN, IDR_SV14ARP2OUT);
			test(parserType::RECURRENCEPATTERN, IDR_SV14ARP3IN, IDR_SV14ARP3OUT);
		}

		TEST_METHOD(Test_STREPORTTAG) { test(parserType::REPORTTAG, IDR_SV15REPORTTAG1IN, IDR_SV15REPORTTAG1OUT); }

		TEST_METHOD(Test_STRESTRICTION)
		{
			test(parserType::RESTRICTION, IDR_SV16RES1IN, IDR_SV16RES1OUT);
			test(parserType::RESTRICTION, IDR_SV16RES2IN, IDR_SV16RES2OUT);
			test(parserType::RESTRICTION, IDR_SV16RES3IN, IDR_SV16RES3OUT);
			test(parserType::RESTRICTION, IDR_SV16RES4IN, IDR_SV16RES4OUT);
		}

		TEST_METHOD(Test_STRULECONDITION)
		{
			test(parserType::RULECONDITION, IDR_SV17RULECON1IN, IDR_SV17RULECON1OUT);
			test(parserType::RULECONDITION, IDR_SV17RULECON2IN, IDR_SV17RULECON2OUT);
			test(parserType::RULECONDITION, IDR_SV17RULECON3IN, IDR_SV17RULECON3OUT);
			test(parserType::RULECONDITION, IDR_SV17RULECON4IN, IDR_SV17RULECON4OUT);
		}

		TEST_METHOD(Test_STSEARCHFOLDERDEFINITION)
		{
			test(parserType::SEARCHFOLDERDEFINITION, IDR_SV18SF1IN, IDR_SV18SF1OUT);
			test(parserType::SEARCHFOLDERDEFINITION, IDR_SV18SF2IN, IDR_SV18SF2OUT);
			test(parserType::SEARCHFOLDERDEFINITION, IDR_SV18SF3IN, IDR_SV18SF3OUT);
			test(parserType::SEARCHFOLDERDEFINITION, IDR_SV18SF4IN, IDR_SV18SF4OUT);
			test(parserType::SEARCHFOLDERDEFINITION, IDR_SV18SF5IN, IDR_SV18SF5OUT);
			test(parserType::SEARCHFOLDERDEFINITION, IDR_SV18SF6IN, IDR_SV18SF6OUT);
			test(parserType::SEARCHFOLDERDEFINITION, IDR_SV18SF7IN, IDR_SV18SF7OUT);
		}

		TEST_METHOD(Test_STSECURITYDESCRIPTOR)
		{
			test(parserType::SECURITYDESCRIPTOR, IDR_SV19SD1IN, IDR_SV19SD1OUT);
			test(parserType::SECURITYDESCRIPTOR, IDR_SV19SD2IN, IDR_SV19SD2OUT);
			test(parserType::SECURITYDESCRIPTOR, IDR_SV19SD3IN, IDR_SV19SD3OUT);
			test(parserType::SECURITYDESCRIPTOR, IDR_SV19SD4IN, IDR_SV19SD4OUT);
		}

		TEST_METHOD(Test_STSID)
		{
			test(parserType::SID, IDR_SV20SID1IN, IDR_SV20SID1OUT);
			test(parserType::SID, IDR_SV20SID2IN, IDR_SV20SID2OUT);
			test(parserType::SID, IDR_SV20SID3IN, IDR_SV20SID3OUT);
			test(parserType::SID, IDR_SV20SID4IN, IDR_SV20SID4OUT);
			test(parserType::SID, IDR_SV20SID5IN, IDR_SV20SID5OUT);
		}

		TEST_METHOD(Test_STTASKASSIGNERS) { test(parserType::TASKASSIGNERS, IDR_SV21TA1IN, IDR_SV21TA1OUT); }

		TEST_METHOD(Test_STTIMEZONE) { test(parserType::TIMEZONE, IDR_SV22TZ1IN, IDR_SV22TZ1OUT); }

		TEST_METHOD(Test_STTIMEZONEDEFINITION)
		{
			test(parserType::TIMEZONEDEFINITION, IDR_SV23TZD1IN, IDR_SV23TZD1OUT);
			test(parserType::TIMEZONEDEFINITION, IDR_SV23TZD2IN, IDR_SV23TZD2OUT);
			test(parserType::TIMEZONEDEFINITION, IDR_SV23TZD3IN, IDR_SV23TZD3OUT);
		}

		TEST_METHOD(Test_STWEBVIEWPERSISTSTREAM)
		{
			test(parserType::WEBVIEWPERSISTSTREAM, IDR_SV24WEBVIEW1IN, IDR_SV24WEBVIEW1OUT);
			test(parserType::WEBVIEWPERSISTSTREAM, IDR_SV24WEBVIEW2IN, IDR_SV24WEBVIEW2OUT);
			test(parserType::WEBVIEWPERSISTSTREAM, IDR_SV24WEBVIEW3IN, IDR_SV24WEBVIEW3OUT);
			test(parserType::WEBVIEWPERSISTSTREAM, IDR_SV24WEBVIEW4IN, IDR_SV24WEBVIEW4OUT);
			test(parserType::WEBVIEWPERSISTSTREAM, IDR_SV24WEBVIEW5IN, IDR_SV24WEBVIEW5OUT);
			test(parserType::WEBVIEWPERSISTSTREAM, IDR_SV24WEBVIEW6IN, IDR_SV24WEBVIEW6OUT);
			test(parserType::WEBVIEWPERSISTSTREAM, IDR_SV24WEBVIEW7IN, IDR_SV24WEBVIEW7OUT);
		}

		TEST_METHOD(Test_STNICKNAMECACHE)
		{
			test(parserType::NICKNAMECACHE, IDR_SV25NICKNAME2IN, IDR_SV25NICKNAME2OUT);
			test(parserType::NICKNAMECACHE, IDR_SV25NICKNAME3IN, IDR_SV25NICKNAME3OUT);
			test(parserType::NICKNAMECACHE, IDR_SV25NICKNAME4IN, IDR_SV25NICKNAME4OUT);
		}

		TEST_METHOD(Test_STENCODEENTRYID)
		{
			test(parserType::ENCODEENTRYID, IDR_SV26EIDENCODE1IN, IDR_SV26EIDENCODE1OUT);
		}

		TEST_METHOD(Test_STDECODEENTRYID)
		{
			test(parserType::DECODEENTRYID, IDR_SV27EIDDECODE1IN, IDR_SV27EIDDECODE1OUT);
		}

		TEST_METHOD(Test_STVERBSTREAM)
		{
			test(parserType::VERBSTREAM, IDR_SV28VERBSTREAM1IN, IDR_SV28VERBSTREAM1OUT);
			test(parserType::VERBSTREAM, IDR_SV28VERBSTREAM2IN, IDR_SV28VERBSTREAM2OUT);
			test(parserType::VERBSTREAM, IDR_SV28VERBSTREAM3IN, IDR_SV28VERBSTREAM3OUT);
			test(parserType::VERBSTREAM, IDR_SV28VERBSTREAM4IN, IDR_SV28VERBSTREAM4OUT);
			test(parserType::VERBSTREAM, IDR_SV28VERBSTREAM5IN, IDR_SV28VERBSTREAM5OUT);
			test(parserType::VERBSTREAM, IDR_SV28VERBSTREAM6IN, IDR_SV28VERBSTREAM6OUT);
			test(parserType::VERBSTREAM, IDR_SV28VERBSTREAM7IN, IDR_SV28VERBSTREAM7OUT);
		}

		TEST_METHOD(Test_STTOMBSTONE)
		{
			test(parserType::TOMBSTONE, IDR_SV29TOMBSTONE1IN, IDR_SV29TOMBSTONE1OUT);
			test(parserType::TOMBSTONE, IDR_SV29TOMBSTONE2IN, IDR_SV29TOMBSTONE2OUT);
			test(parserType::TOMBSTONE, IDR_SV29TOMBSTONE3IN, IDR_SV29TOMBSTONE3OUT);
		}

		TEST_METHOD(Test_STPCL)
		{
			test(parserType::PCL, IDR_SV30PCL1IN, IDR_SV30PCL1OUT);
			test(parserType::PCL, IDR_SV30PCL2IN, IDR_SV30PCL2OUT);
			test(parserType::PCL, IDR_SV30PCL3IN, IDR_SV30PCL3OUT);
		}

		TEST_METHOD(Test_STFBSECURITYDESCRIPTOR)
		{
			test(parserType::FBSECURITYDESCRIPTOR, IDR_SV31FREEBUSYSID1IN, IDR_SV31FREEBUSYSID1OUT);
			test(parserType::FBSECURITYDESCRIPTOR, IDR_SV31FREEBUSYSID2IN, IDR_SV31FREEBUSYSID2OUT);
		}

		TEST_METHOD(Test_STXID)
		{
			test(parserType::XID, IDR_SV32XID1IN, IDR_SV32XID1OUT);
			test(parserType::XID, IDR_SV32XID2IN, IDR_SV32XID2OUT);
			test(parserType::XID, IDR_SV32XID3IN, IDR_SV32XID3OUT);
			test(parserType::XID, IDR_SV32XID4IN, IDR_SV32XID4OUT);
		}
	};
} // namespace SmartViewTest