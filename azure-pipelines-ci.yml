# Continuous integration
name: $(Year:yy).2.$(date:yy)$(DayOfYear)$(rev:.rr)

stages:
- stage: Build
  jobs:
  - job: Build
    strategy:
      matrix:
        # Release_Win32:
        #   BuildConfiguration: 'Release'
        #   BuildPlatform: 'Win32'
        # Debug_Win32:
        #   BuildConfiguration: 'Debug'
        #   BuildPlatform: 'Win32'
        ReleaseUnicode_Win32:
          BuildConfiguration: 'Release Unicode'
          BuildPlatform: 'Win32'
        # DebugUnicode_Win32:
        #   BuildConfiguration: 'Debug Unicode'
        #   BuildPlatform: 'Win32'
        # Release_x64:
        #   BuildConfiguration: 'Release'
        #   BuildPlatform: 'x64'
        # Debug_x64:
        #   BuildConfiguration: 'Debug'
        #   BuildPlatform: 'x64'
        ReleaseUnicode_x64:
          BuildConfiguration: 'Release Unicode'
          BuildPlatform: 'x64'
        # DebugUnicode_x64:
        #   BuildConfiguration: 'Debug Unicode'
        #   BuildPlatform: 'x64'

    pool:
      name: Azure Pipelines
      vmImage: 'windows-latest'
      demands:
      - msbuild
      - visualstudio
      - vstest

    steps:
    - checkout: self
      clean: true
      submodules: recursive
    - powershell: |
       gci env:BUILD_BUILDNUMBER
       $Env:BUILD_BUILDNUMBER -match "(\d+)\.(\d+)\.(\d+)\.(\d+)"
       $m = $matches
       $file = gci "$Env:BUILD_SOURCESDIRECTORY\core\res\bldver.rc"
       if($file)
       {
        attrib $file -r
        $fc = Get-Content($file)
        $fc = $fc -replace "#define rmj (\d+)", ("#define rmj "+$m[1])
        $fc = $fc -replace "#define rmm (\d+)", ("#define rmm "+$m[2])
        $fc = $fc -replace "#define rup (\d+)", ("#define rup "+$m[3])
        $fc = $fc -replace "#define rmn (\d+)", ("#define rmn "+$m[4])
        $fc | Out-File $file
       }
      displayName: 'Add Version'

    - task: VSBuild@1
      displayName: Build
      inputs:
        solution: '**/*.sln'
        vsVersion: latest
        msbuildArgs: '/p:SourceLinkCreate=true'
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        # clean: true
        # maximumCpuCount: true
        # msbuildArchitecture: x64
        # createLogFile: true

    # - task: VSTest@2
    #   displayName: 'VsTest - UnitTests'
    #   inputs:
    #     runInParallel: true
    #     codeCoverageEnabled: true
    #     diagnosticsEnabled: True

    # It looks like this consumes azure artifact space which is super limited
    # We'll keep symbols over in the github release instead
    # - task: PublishSymbols@2
    #   displayName: 'Publish symbols path'
    #   inputs:
    #     IndexSources: false
    #     SymbolServerType: TeamServices
    #     DetailedLog: true

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\bin'
        Contents: |
          **\mfcmapi.exe
          **\mfcmapi.pdb
          **\mrmapi.exe
          **\mrmapi.pdb
        TargetFolder: '$(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        OverWrite: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'

- stage: Release
  jobs:
  - job: Release
    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.ArtifactsDirectory)/drop/Win32/MrMAPI/Release Unicode/MrMAPI.exe'
        # includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/MrMAPI.exe.$(Build.BuildNumber).zip'
        # replaceExistingArchive: true
        
    # Compress-File -Source "$indir\Win32\MrMAPI\Release Unicode\MrMAPI.exe" -Target "$outdir\MrMAPI.exe.$version.zip"
    # Compress-File -Source "$indir\Win32\MrMAPI\Release Unicode\MrMAPI.pdb" -Target "$outdir\MrMAPI.pdb.$version.zip"
    # Compress-File -Source "$indir\x64\MrMAPI\Release Unicode\MrMAPI.exe" -Target "$outdir\MrMAPI.exe.x64.$version.zip"
    # Compress-File -Source "$indir\x64\MrMAPI\Release Unicode\MrMAPI.pdb" -Target "$outdir\MrMAPI.pdb.x64.$version.zip"
    # Compress-File -Source "$indir\Win32\Release Unicode\MFCMAPI.exe" -Target "$outdir\MFCMAPI.exe.$version.zip"
    # Compress-File -Source "$indir\Win32\Release Unicode\MFCMAPI.pdb" -Target "$outdir\MFCMAPI.pdb.$version.zip"
    # Compress-File -Source "$indir\x64\Release Unicode\MFCMAPI.exe" -Target "$outdir\MFCMAPI.exe.x64.$version.zip"
    # Compress-File -Source "$indir\x64\Release Unicode\MFCMAPI.pdb" -Target "$outdir\MFCMAPI.pdb.x64.$version.zip"

    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'stephenegriffin'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'userSpecifiedTag'
        tag: '$(Build.BuildNumber)'
        title: 'Continuous Integration ($(Build.BuildNumber))'
        releaseNotesSource: 'inline'
        releaseNotesInline: 'Build: *$(Build.BuildNumber)*\n\nThis is the unicode continuous integration build of MFCMAPI.\n\nIf you just want to run the MFCMAPI or MrMAPI, get the executables (exe). If you want to debug them, get the symbol files (pdb).\n\n*The 64 bit builds will only work on a machine with Outlook 2010/2013/2016 64 bit installed. All other machines should use the 32 bit builds, regardless of the operating system.*\n\n[![Facebook Badge](http://badge.facebook.com/badge/26764016480.2776.1538253884.png)](http://www.facebook.com/MFCMAPI)\n\n[Download stats](https://www.somsubhra.com/github-release-stats/?username=stephenegriffin&repository=mfcmapi&search=0)'
        isDraft: true
        isPreRelease: true
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
        assets: |
          $(Build.ArtifactStagingDirectory)/*.zip